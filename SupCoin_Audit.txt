

================ sup token ================

-You need to replace "-" for -div and "+" for append.
    If you audit this contract with hard evidence or curtis, you will be asked this.
    I am working with soliddproof & Certic company for smart contract audit.

- Requires onwership renounce function

- It would be better to modify the Withdrawal Token function as shown below.
    If you give up ownership of contract, you can withdraw tokens to the fee address.

    function withdrawToken(address _tokenAddress,uint256 _amount) external onlyOwner {
        IERC20(_tokenAddress).transfer(owner(),_amount);
    }

    function withdrawToken(address _tokenAddress,uint256 _amount) external {
        require(feeAddress == msg.sender, "only fee address can access");
        IERC20(_tokenAddress).transfer(owner(),_amount);
    }

    Even though, you renounce the ownership, it should available to withdraw tokens and ETH.

- allocateTokens function is not work. 
    You should fix this function by transferfrom. Previous developer can fix this issue easily.

    function allocateTokens(
        address presale, address staking, address team, address ecosystem, 
        address marketing, address treasury, address airdrop, address dev
    ) external onlyOwner() {
    
        require(balanceOf(address(this)) == TOTAL_SUPPLY, "Already allocated");

        transfer(presale, TOTAL_SUPPLY * 230 / 1000);
        transfer(staking, TOTAL_SUPPLY * 120 / 1000);

        transfer(team, TOTAL_SUPPLY * 100 / 1000);
        transfer(ecosystem, TOTAL_SUPPLY * 228 / 1000);
        transfer(marketing, TOTAL_SUPPLY * 100 / 1000);

        transfer(treasury, TOTAL_SUPPLY * 55 / 1000);

        transfer(owner(), TOTAL_SUPPLY * 15 / 100);

        transfer(airdrop, TOTAL_SUPPLY * 2 / 1000);
        transfer(dev, TOTAL_SUPPLY * 150 / 1000);
    }



================ Presale ================

No error in Presale.


================ Staking ================
-consider renounce function

-You must set Subaddresses as constructor.
      These are the rules for building smart contracts.
      The decimal number of subcoin is 18. However, the staking contract shows the decimal number 6 for Supercoin.
      The decimal point must be removed from the token contract or initialized in the contract.

    function setFeeWallet(address _addr) public onlyOwner {
            feeWallet = _addr;
        }

    function setFeeWallet(address _addr) public {
            require(feeWallet == msg.sender, "only feeWallet can access to this function");
            feeWallet = _addr;
        }

    When you renounce ownership of smart contract, anyone can't change the feeWallet. So we have to change code like bellow.
    function setToken(address _addr, uint256 _decimal) public onlyOwner {
            require(_addr != address(0), "invalid address");
            require(_decimal > 0, "decimal must be greater than zero");

            SUP = _addr;
            SUP_DECIMAL = _decimal;
        }
    
    This feature should be removed. Users may think there is a problem with the sup token. If your Sup token is perfect, there is no need to change the token address.

================ Airdrop ================

-After a user claims a token, the amount the user can claim should decrease in claim function.
    function claim(uint256 _amount) public  {
        require(block.timestamp >= startTime, "SUP AIRDROP: Not started yet.");
        require(block.timestamp <= endTime, "SUP AIRDROP: Aready ended.");
        require(_amount>0, "SUP AIRDROP: Amount should be bigger than zero.");
        require(userClaimableAmount[msg.sender] > 0, "Caller is not in the whitelist.");
       
        SupToken.transfer(msg.sender, _amount);

        // userClaimableAmount[]msg.sender -+ _amount;
        userClaimedAmount[msg.sender] += _amount;

        emit Claim(msg.sender, _amount);        
    }
